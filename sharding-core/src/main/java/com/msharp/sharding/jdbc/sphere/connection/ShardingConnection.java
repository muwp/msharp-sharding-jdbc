package com.msharp.sharding.jdbc.sphere.connection;

import com.msharp.sharding.jdbc.sphere.statement.ShardingStatement;
import com.msharp.sharding.jdbc.sphere.statement.ShardingPreparedStatement;
import com.msharp.single.jdbc.monitor.statement.MonitorPreparedStatement;
import com.msharp.single.jdbc.monitor.statement.MonitorStatement;
import io.shardingsphere.shardingjdbc.jdbc.adapter.AbstractConnectionAdapter;
import io.shardingsphere.shardingjdbc.jdbc.core.ShardingContext;
import io.shardingsphere.transaction.api.TransactionType;

import javax.sql.DataSource;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.util.Map;

/**
 * ShardingConnection
 *
 * @author mwup
 * @version 1.0
 * @created 2019/02/15 13:51
 **/
public final class ShardingConnection extends AbstractConnectionAdapter {

    private final Map<String, DataSource> dataSourceMap;

    private final ShardingContext shardingContext;

    public ShardingConnection(final Map<String, DataSource> dataSourceMap, final ShardingContext shardingContext, final TransactionType transactionType) {
        super(transactionType);
        this.dataSourceMap = dataSourceMap;
        this.shardingContext = shardingContext;
    }

    @Override
    public DatabaseMetaData getMetaData() {
        return shardingContext.getDatabaseMetaData();
    }

    @Override
    public PreparedStatement prepareStatement(final String sql) {
        return MonitorPreparedStatement.from(new ShardingPreparedStatement(this, sql), sql, this);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency) {
        return MonitorPreparedStatement.from(new ShardingPreparedStatement(this, sql, resultSetType, resultSetConcurrency), sql, this);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {
        return MonitorPreparedStatement.from(new ShardingPreparedStatement(this, sql, resultSetType, resultSetConcurrency, resultSetHoldability), sql, this);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) {
        return MonitorPreparedStatement.from(new ShardingPreparedStatement(this, sql, autoGeneratedKeys), sql, this);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes) {
        return MonitorPreparedStatement.from(new ShardingPreparedStatement(this, sql, Statement.RETURN_GENERATED_KEYS), sql, this);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final String[] columnNames) {
        return MonitorPreparedStatement.from(new ShardingPreparedStatement(this, sql, Statement.RETURN_GENERATED_KEYS), sql, this);
    }

    @Override
    public Statement createStatement() {
        return MonitorStatement.from(new ShardingStatement(this), this);
    }

    @Override
    public Statement createStatement(final int resultSetType, final int resultSetConcurrency) {
        return MonitorStatement.from(new ShardingStatement(this, resultSetType, resultSetConcurrency), this);
    }

    @Override
    public Statement createStatement(final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {
        return MonitorStatement.from(new ShardingStatement(this, resultSetType, resultSetConcurrency, resultSetHoldability), this);
    }

    @Override
    protected Map<String, DataSource> getDataSourceMap() {
        return dataSourceMap;
    }

    public ShardingContext getShardingContext() {
        return shardingContext;
    }
}
