package com.msharp.single.jdbc.monitor.statement;

import java.sql.*;

/**
 * Monitor Statement
 *
 * @author mwup
 * @version 1.0
 * @created 2019/02/22 13:51
 **/
public class MonitorStatement implements Statement {

    protected final Statement innerStatement;

    protected final Connection connection;

    protected boolean closed;

    public static MonitorStatement from(Statement statement, Connection connection) {
        return new MonitorStatement(statement, connection);
    }

    public MonitorStatement(Statement statement, Connection connection) {
        this.innerStatement = statement;
        this.connection = connection;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        this.checkClosed();
        ResultSet result = this.innerStatement.executeQuery(sql);
        return result;
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        this.checkClosed();
        int updatedCount = this.innerStatement.executeUpdate(sql);
        return updatedCount;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        this.checkClosed();
        int updatedCount = this.innerStatement.executeUpdate(sql, autoGeneratedKeys);
        return updatedCount;
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        this.checkClosed();
        int updatedCount = this.innerStatement.executeUpdate(sql, columnIndexes);
        return updatedCount;
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        this.checkClosed();
        int updatedCount = this.innerStatement.executeUpdate(sql, columnNames);
        return updatedCount;
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        this.checkClosed();
        boolean hasResultSet = this.innerStatement.execute(sql);
        return hasResultSet;
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        this.checkClosed();
        boolean hasResultSet = this.innerStatement.execute(sql, autoGeneratedKeys);
        return hasResultSet;
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        this.checkClosed();
        boolean hasResultSet = this.innerStatement.execute(sql, columnIndexes);
        return hasResultSet;
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        this.checkClosed();
        boolean hasResultSet = this.innerStatement.execute(sql, columnNames);
        return hasResultSet;
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        this.innerStatement.addBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
        this.innerStatement.clearBatch();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        this.checkClosed();
        return this.innerStatement.executeBatch();
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return this.innerStatement.getGeneratedKeys();
    }

    @Override
    public Connection getConnection() throws SQLException {
        return this.connection;
    }

    @Override
    public void cancel() throws SQLException {
        this.innerStatement.cancel();
    }

    @Override
    public void close() throws SQLException {
        if (!this.closed) {
            this.innerStatement.close();
            this.closed = true;
        }
    }

    protected void checkClosed() throws SQLException {
        if (this.closed) {
            throw new SQLException("Operation not supported after statement closed.");
        }
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return this.innerStatement.getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        this.innerStatement.setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws SQLException {
        return this.innerStatement.getMaxRows();
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        this.innerStatement.setMaxRows(max);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        this.innerStatement.setEscapeProcessing(enable);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return this.innerStatement.getQueryTimeout();
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        this.innerStatement.setQueryTimeout(seconds);
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return this.innerStatement.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        this.innerStatement.clearWarnings();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        this.innerStatement.setCursorName(name);
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return this.innerStatement.getResultSet();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return this.innerStatement.getUpdateCount();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return this.innerStatement.getMoreResults(current);
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return this.innerStatement.getMoreResults();
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return this.innerStatement.getFetchDirection();
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        this.innerStatement.setFetchDirection(direction);
    }

    @Override
    public int getFetchSize() throws SQLException {
        return this.innerStatement.getFetchSize();
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        this.innerStatement.setFetchSize(rows);
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return this.innerStatement.getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return this.innerStatement.getResultSetType();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return this.innerStatement.getResultSetHoldability();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return this.innerStatement.isClosed();
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return this.innerStatement.isPoolable();
    }

    @Override

    public void setPoolable(boolean poolable) throws SQLException {
        this.innerStatement.setPoolable(poolable);
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        throw new UnsupportedOperationException("closeOnCompletion");
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        throw new UnsupportedOperationException("isCloseOnCompletion");
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return this.innerStatement.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return this.innerStatement.isWrapperFor(iface);
    }
}