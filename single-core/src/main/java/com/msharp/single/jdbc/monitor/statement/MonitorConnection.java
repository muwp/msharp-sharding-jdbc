package com.msharp.single.jdbc.monitor.statement;

import java.sql.*;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

/**
 * Monitorable Statement
 *
 * @author mwup
 * @version 1.0
 * @created 2019/02/22 13:51
 **/
public class MonitorConnection implements Connection {

    /**
     * Connection
     * {@link Connection}
     */
    private final Connection innerConnection;

    public static MonitorConnection from(Connection connection) {
        return new MonitorConnection(connection);
    }

    public MonitorConnection(Connection connection) {
        this.innerConnection = connection;
    }

    @Override
    public Statement createStatement() throws SQLException {
        return new MonitorStatement(this.innerConnection.createStatement(), this);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new MonitorStatement(this.innerConnection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability), this);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return new MonitorStatement(this.innerConnection.createStatement(resultSetType, resultSetConcurrency), this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new MonitorPreparedStatement(this.innerConnection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability), sql, this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return new MonitorPreparedStatement(this.innerConnection.prepareStatement(sql, autoGeneratedKeys), sql, this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return new MonitorPreparedStatement(this.innerConnection.prepareStatement(sql, columnIndexes), sql, this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return new MonitorPreparedStatement(this.innerConnection.prepareStatement(sql, columnNames), sql, this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new MonitorPreparedStatement(this.innerConnection.prepareStatement(sql), sql, this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return new MonitorPreparedStatement(this.innerConnection.prepareStatement(sql, resultSetType, resultSetConcurrency), sql, this);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new MonitorCallableStatement(this.innerConnection.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability), sql, this);
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        return new MonitorCallableStatement(this.innerConnection.prepareCall(sql), sql, this);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return new MonitorCallableStatement(this.innerConnection.prepareCall(sql, resultSetType, resultSetConcurrency), sql, this);
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return this.innerConnection.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return this.innerConnection.isWrapperFor(iface);
    }

    @Override
    public String nativeSQL(String sql) throws SQLException {
        return this.innerConnection.nativeSQL(sql);
    }

    @Override
    public boolean getAutoCommit() throws SQLException {
        return this.innerConnection.getAutoCommit();
    }

    @Override
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        this.innerConnection.setAutoCommit(autoCommit);
    }

    @Override
    public void commit() throws SQLException {
        this.innerConnection.commit();
    }

    @Override
    public void rollback() throws SQLException {
        this.innerConnection.rollback();
    }

    @Override
    public void close() throws SQLException {
        this.innerConnection.close();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return this.innerConnection.isClosed();
    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return this.innerConnection.getMetaData();
    }

    @Override
    public boolean isReadOnly() throws SQLException {
        return this.innerConnection.isReadOnly();
    }

    @Override
    public void setReadOnly(boolean readOnly) throws SQLException {
        this.innerConnection.setReadOnly(readOnly);
    }

    @Override
    public String getCatalog() throws SQLException {
        return this.innerConnection.getCatalog();
    }

    @Override
    public void setCatalog(String catalog) throws SQLException {
        this.innerConnection.setCatalog(catalog);
    }

    @Override
    public int getTransactionIsolation() throws SQLException {
        return this.innerConnection.getTransactionIsolation();
    }

    @Override
    public void setTransactionIsolation(int level) throws SQLException {
        this.innerConnection.setTransactionIsolation(level);
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return this.innerConnection.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        this.innerConnection.clearWarnings();
    }

    @Override
    public Map<String, Class<?>> getTypeMap() throws SQLException {
        return this.innerConnection.getTypeMap();
    }

    @Override
    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        this.innerConnection.setTypeMap(map);
    }

    @Override
    public int getHoldability() throws SQLException {
        return this.innerConnection.getHoldability();
    }

    @Override
    public void setHoldability(int holdability) throws SQLException {
        this.innerConnection.setHoldability(holdability);
    }

    @Override
    public Savepoint setSavepoint() throws SQLException {
        return this.innerConnection.setSavepoint();
    }

    @Override
    public Savepoint setSavepoint(String name) throws SQLException {
        return this.innerConnection.setSavepoint(name);
    }

    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        this.innerConnection.rollback(savepoint);
    }

    @Override
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        this.innerConnection.releaseSavepoint(savepoint);
    }

    @Override
    public Clob createClob() throws SQLException {
        return this.innerConnection.createClob();
    }

    @Override
    public Blob createBlob() throws SQLException {
        return this.innerConnection.createBlob();
    }

    @Override
    public NClob createNClob() throws SQLException {
        return this.innerConnection.createNClob();
    }

    @Override
    public SQLXML createSQLXML() throws SQLException {
        return this.innerConnection.createSQLXML();
    }

    @Override
    public boolean isValid(int timeout) throws SQLException {
        return this.innerConnection.isValid(timeout);
    }

    @Override
    public void setClientInfo(String name, String value) throws SQLClientInfoException {
        this.innerConnection.setClientInfo(name, value);
    }

    @Override
    public String getClientInfo(String name) throws SQLException {
        return this.innerConnection.getClientInfo(name);
    }

    @Override
    public Properties getClientInfo() throws SQLException {
        return this.innerConnection.getClientInfo();
    }

    @Override
    public void setClientInfo(Properties properties) throws SQLClientInfoException {
        this.innerConnection.setClientInfo(properties);
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        return this.innerConnection.createArrayOf(typeName, elements);
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        return this.innerConnection.createStruct(typeName, attributes);
    }

    @Override
    public String getSchema() throws SQLException {
        throw new UnsupportedOperationException("getSchema");
    }

    @Override
    public void setSchema(String schema) throws SQLException {
        throw new UnsupportedOperationException("setSchema");
    }

    @Override
    public void abort(Executor executor) throws SQLException {
        throw new UnsupportedOperationException("abort");
    }

    @Override
    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
        throw new UnsupportedOperationException("setNetworkTimeout");
    }

    @Override
    public int getNetworkTimeout() throws SQLException {
        throw new UnsupportedOperationException("getNetworkTimeout");
    }

    public Connection getInnerConnection() {
        return this.innerConnection;
    }
}